# Training parameters
train_params:
  epochs: 60
  device: "cpu" # device name, values: "cpu" or "cuda:x" where 'x' is gpu index, or "cuda:a" to use all GPUs
  optimizer: "adam"
  save_every: 10
  swa_start: 30 # start epoch of stochastic weight averaging
  patience: 3 # how many epochs we want to wait after the last time the validation loss improved before breaking the training loop
  early_stopping_delta: 0
  grad_clipping: 0 # set to zero to disable grad clipping
  early_stopping: False # whether to stop early or not
  start_saving_best: 10 # start epoch of saving best model

# Logger parameters
logger:
  workspace: "VertiWheelers" # workspace name
  project_name: "IROS2023" # project name
  experiment_name: "train" # name of the experiment
  tags: "resnet train"
  resume: False # (boolean) whether to resume training or not
  online: True # (boolean) whether to store logs online or not
  experiment_key: "" # can be retrieved from logger dashboard, available if only resuming
  offline_directory: "./logs" # where to store log data
  disabled: True # disable the comet ml

# Dataloader parameters
dataloader:
  num_workers: 2 # Allowing multi-processing
  batch_size: 64
  shuffle: True # whether to shuffle data or not
  pin_memory: False # use pageable memory or pinned memory (https://developer.nvidia.com/blog/how-optimize-data-transfers-cuda-cc/)

# Train dataset parameters
dataset:
  root: "verti_wheelers/data" # where data resides
  train: True # train data

# Validation dataset parameters/ only change parameters that are different from train data
val_dataset:
  train: False # val data

model:
  dims: [512, 256, 128, 64, 2] # controller dimensions
  act: 'relu' # activation function for controller [relu, tanh, sigmoid]
  l_act: False # squeeze output?
  bn: False  # batchnorm for controller 
  dropout: 0.0 # droput for controller 

# directories
directory:
  model_name: "resnet18" # file name for saved model
  save: "verti_wheelers/checkpoint"
  load: "verti_wheelers/checkpoint/resnet18-best.pt"


# model initializer
init_model:
  method: "uniform" # kaiming_normal, kaiming_uniform, normal, uniform, xavier_normal, xavier_uniform
  mean: 0.0 # mean of normal distribution
  std: 0.5 # standard deviation for normal distribution
  low: 0.0 # minimum threshold for uniform distribution
  high: 1.0 # maximum threshold for uniform distribution
  mode: "fan_in" # either 'fan_in' (default) or 'fan_out'. Choosing 'fan_in' preserves the magnitude of the variance of the weights in the forward pass. Choosing 'fan_out' preserves the magnitudes in the backwards pass.
  nonlinearity: "leaky_relu" # the non-linear function (nn.functional name), recommended to use only with 'relu' or 'leaky_relu' (default).
  gain: 1.0 # an optional scaling factor for xavier initialization

# Adam parameters if using Adam optimizer
adam:
  lr: 1e-5
  betas:
    - 0.9
    - 0.999
  eps: 1e-8
  weight_decay: 0
  amsgrad: False

# RMSprop parameters if using RMSprop optimizer
rmsprop:
  lr: 1e-3
  momentum: 0
  alpha: 0.99
  eps: 1e-8
  centered: False
  weight_decay: 0

# SGD parameters if using SGD optimizer
sgd:
  lr: 1e-3
  momentum: 0 # momentum factor
  weight_decay: 0 # weight decay (L2 penalty)
  dampening: 0 # dampening for momentum
  nesterov: False # enables Nesterov momentum

# Stochastic Weight Averaging parameters
SWA:
  anneal_strategy: "linear" # 'linear' of 'cos'
  anneal_epochs: 5 # anneals the lr from its initial value to swa_lr in anneal_epochs within each parameter group
  swa_lr: 0.05
